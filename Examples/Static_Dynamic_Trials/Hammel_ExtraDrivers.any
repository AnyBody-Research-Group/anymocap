AnyFolder ExtraDrivers = {
  
  AnyFolder &JntPos= Main.HumanModel.Mannequin.Posture;  
AnyFolder &JntVel= Main.HumanModel.Mannequin.PostureVel;

AnyKinEqSimpleDriver SCDriverLeft ={
  AnyKinMeasureOrg &ref3 =...BodyModel.Interface.Left.SternoClavicularAxialRotation;
  DriverPos = pi/180*{
    .JntPos.Left.SternoClavicularAxialRotation
  };
  DriverVel = pi/180*{
    .JntVel.Left.SternoClavicularAxialRotation
  };
  Reaction.Type={Off};
};
AnyKinEqSimpleDriver SCDriverRight ={
  AnyKinMeasureOrg &ref3 =...BodyModel.Interface.Right.SternoClavicularAxialRotation;
  DriverPos = pi/180*{
    .JntPos.Right.SternoClavicularAxialRotation
  };
  DriverVel = {
    .JntVel.Right.SternoClavicularAxialRotation
  };
  Reaction.Type={Off};
};


AnyKinEqSimpleDriver GlenohumeralExternalRotationRight ={
  AnyKinMeasureOrg &ref3 =...BodyModel.Interface.Right.GlenohumeralExternalRotation;
  DriverPos = pi/180*{
    .JntPos.Right.GlenohumeralExternalRotation
  };
  DriverVel = {
    .JntVel.Right.GlenohumeralExternalRotation
  };
  Reaction.Type={Off};
  CType = {Soft};
  AnyFolder Weight = { AnyFunConst fun =  { Value ={0.005}; }; };
  WeightFun = {&Weight.fun};
};

AnyKinEqSimpleDriver GlenohumeralExternalRotationLeft={
  AnyKinMeasureOrg &ref3 =...BodyModel.Interface.Left.GlenohumeralExternalRotation;
  DriverPos = pi/180*{
    .JntPos.Left.GlenohumeralExternalRotation
  };
  DriverVel = {
    .JntVel.Left.GlenohumeralExternalRotation
  };
  Reaction.Type={Off};
  CType = {Soft};
  AnyFolder Weight = { AnyFunConst fun =  { Value ={0.005}; }; };
  WeightFun = {&Weight.fun};
  };


AnyKinEqSimpleDriver WristAbductionRight ={
  AnyKinMeasureOrg &ref3 =...BodyModel.Interface.Right.WristAbduction;
  DriverPos = pi/180*{
    .JntPos.Right.WristAbduction
  };
  DriverVel = {
    .JntVel.Right.WristAbduction
  };
  Reaction.Type={Off};
  CType = {Soft};
  AnyFolder Weight = { AnyFunConst fun =  { Value ={0.01}; }; };
  WeightFun = {&Weight.fun};
};

AnyKinEqSimpleDriver WristAbductionLeft ={
  AnyKinMeasureOrg &ref3 =...BodyModel.Interface.Left.WristAbduction;
  DriverPos = pi/180*{
    .JntPos.Left.WristAbduction
  };
  DriverVel = {
    .JntVel.Left.WristAbduction
  };
  Reaction.Type={Off};
  CType = {Soft};
  AnyFolder Weight = { AnyFunConst fun =  { Value ={0.01}; }; };
  WeightFun = {&Weight.fun};
};  
  
  
AnyKinEqSimpleDriver RightEversionBrace={
  AnyKinMeasureOrg &ref1= ...BodyModel.Interface.Right.SubTalarEversion; 
  DriverPos= pi/180*{
    .JntPos.Right.SubTalarEversion 
  };
  DriverVel={0};
  Reaction.Type={Off};
  CType = {Soft};
  AnyFolder Weight = { AnyFunConst fun =  { Value ={0.005}; }; };
  WeightFun = {&Weight.fun};
};

AnyKinEqSimpleDriver LefEversionBrace={
  AnyKinMeasureOrg &ref1= ...BodyModel.Interface.Left.SubTalarEversion; 
  DriverPos=pi/180*{
    .JntPos.Left.SubTalarEversion 
  };
  DriverVel={0};
  Reaction.Type={Off};
  CType = {Soft};
  AnyFolder Weight = { AnyFunConst fun =  { Value ={0.005}; }; };
  WeightFun = {&Weight.fun};
};






//// Drivers added while markers are being fixed  /////

#if MOCAP_IS_STANDING_REFERENCE == 1

Main.EnvironmentModel.GlobalRef = {
AnyRefNode RotNode = {ARel = RotMat(pi/2,x);};
};


AnyKinEqSimpleDriver RightFootGroundDriver={
   AnyKinRotational rot = {
     AnyRefFrame &tlemfoot = Main.HumanModel.BodyModel.Right.Leg.Seg.Foot.AnatomicalFrame;
     AnyRefFrame &globalref = Main.EnvironmentModel.GlobalRef.RotNode;
     Type = RotAxesAngles;
     
     Axis1 = y;
     Axis2 = z;
     Axis3 = x;
   };
  
  MeasureOrganizer = {1,2};
  DriverPos  ={0,0};
  DriverVel = {0,0};
  Reaction.Type={Off,Off};
  CType = {Soft,Soft};
  AnyFolder Weight = { AnyFunConst fun =  { Value ={0.1,0.1}; }; };
  WeightFun = {&Weight.fun};
};  

AnyKinEqSimpleDriver LeftFootGroundDriver={
   AnyKinRotational rot = {
     AnyRefFrame &tlemfoot = Main.HumanModel.BodyModel.Left.Leg.Seg.Foot.AnatomicalFrame;
     AnyRefFrame &globalref = Main.EnvironmentModel.GlobalRef.RotNode;
     Type = RotAxesAngles;
     
     Axis1 = y;
     Axis2 = z;
     Axis3 = x;
   };
  
  MeasureOrganizer = {1,2};
  DriverPos  ={0,0};
  DriverVel = {0,0};
  Reaction.Type={Off,Off};
  CType = {Soft,Soft};
  AnyFolder Weight = { AnyFunConst fun =  { Value ={0.1,0.1}; }; };
  WeightFun = {&Weight.fun};
};  


AnyKinEqSimpleDriver SkullGroundDriver={
   AnyKinMeasureOrg SkullGround = 
   {
       AnyKinRotational Rot = {
         AnyRefFrame &ref0 = Main.HumanModel.BodyModel.Trunk.SegmentsThorax.SkullSeg.AnatomicalFrame;
         AnyRefFrame &ref1 = Main.EnvironmentModel.GlobalRef.RotNode;
     Type = RotAxesAngles;
     
     Axis1 = y;
     Axis2 = z;
     Axis3 = x;
       
       };
     MeasureOrganizer = {1,2};
   };
  DriverPos={0,0};
  DriverVel={0,0};
  Reaction.Type={Off,Off};
  CType = {Soft,Soft};
  AnyFolder Weight = { AnyFunConst fun =  { Value ={0.01,0.01}; }; };
  WeightFun = {&Weight.fun};
};  






AnyKinEqSimpleDriver SternoClavicularProtractionLeft ={
  AnyKinMeasureOrg &ref3 =...BodyModel.Interface.Left.SternoClavicularProtraction;
  DriverPos = pi/180*{
    .JntPos.Left.SternoClavicularProtraction
  };
  DriverVel = pi/180*{
    .JntVel.Left.SternoClavicularProtraction
  };
  Reaction.Type={Off};
  CType = {Soft};
  AnyFolder Weight = { AnyFunConst fun =  { Value ={0.005}; }; };
  WeightFun = {&Weight.fun};
};
AnyKinEqSimpleDriver SternoClavicularProtractionRight ={
  AnyKinMeasureOrg &ref3 =...BodyModel.Interface.Right.SternoClavicularProtraction;
  DriverPos = pi/180*{
    .JntPos.Right.SternoClavicularProtraction
  };
  DriverVel = {
    .JntVel.Right.SternoClavicularProtraction
  };
  Reaction.Type={Off};
  CType = {Soft};
  AnyFolder Weight = { AnyFunConst fun =  { Value ={0.005}; }; };
  WeightFun = {&Weight.fun};
};
AnyKinEqSimpleDriver SternoClavicularElevationLeft ={
  AnyKinMeasureOrg &ref3 =...BodyModel.Interface.Left.SternoClavicularElevation;
  DriverPos = pi/180*{
    .JntPos.Left.SternoClavicularElevation
  };
  DriverVel = pi/180*{
    .JntVel.Left.SternoClavicularElevation
  };
  Reaction.Type={Off};
  CType = {Soft};
  AnyFolder Weight = { AnyFunConst fun =  { Value ={0.005}; }; };
  WeightFun = {&Weight.fun};
};
AnyKinEqSimpleDriver SternoClavicularElevationRight ={
  AnyKinMeasureOrg &ref3 =...BodyModel.Interface.Right.SternoClavicularElevation;
  DriverPos = pi/180*{
    .JntPos.Right.SternoClavicularElevation
  };
  DriverVel = {
    .JntVel.Right.SternoClavicularElevation
  };
  Reaction.Type={Off};
  CType = {Soft};
  AnyFolder Weight = { AnyFunConst fun =  { Value ={0.005}; }; };
  WeightFun = {&Weight.fun};
};




// HEAD
//AnyKinEqSimpleDriver SkullThoraxFlexion={
//  AnyKinMeasureOrg &ref1= ...BodyModel.Interface.Trunk.SkullThoraxFlexion; 
//  DriverPos={0};
//  DriverVel={0};
//  Reaction.Type={Off};
//  CType = {Soft};
//  AnyFolder Weight = { AnyFunConst fun =  { Value ={0.1}; }; };
//  WeightFun = {&Weight.fun};
//};          
//AnyKinEqSimpleDriver SkullThoraxLateralBending={
//  AnyKinMeasureOrg &ref1= ...BodyModel.Interface.Trunk.SkullThoraxLateralBending; 
//  DriverPos={0};DriverVel={0};  Reaction.Type={Off};
//  CType = {Soft};
//  AnyFolder Weight = { AnyFunConst fun =  { Value ={0.1}; }; };
//  WeightFun = {&Weight.fun};
//};       
//
//AnyKinEqSimpleDriver SkullThoraxRotation={
//  AnyKinMeasureOrg &ref1= ...BodyModel.Interface.Trunk.SkullThoraxRotation; 
//  DriverPos={0};DriverVel={0};   Reaction.Type={Off};
//  CType = {Soft};
//  AnyFolder Weight = { AnyFunConst fun =  { Value ={0.1}; }; };
//  WeightFun = {&Weight.fun};
//};          

// THORAX

AnyKinEqSimpleDriver ThoraxRotation={
  AnyKinMeasureOrg &ref1 = ...BodyModel.Interface.Trunk.PelvisThoraxRotation;
  DriverPos= pi/180*{
    .JntPos.PelvisThoraxRotation
  };
  DriverVel={0};
  Reaction.Type={Off};
  CType = {Soft};
  AnyFolder Weight = { AnyFunConst fun =  { Value ={1}; }; };
  WeightFun = {&Weight.fun};
};             
AnyKinEqSimpleDriver ThoraxExtension ={
  AnyKinMeasureOrg &ref1 = ...BodyModel.Interface.Trunk.PelvisThoraxExtension ;
  DriverPos=pi/180*{
    .JntPos.PelvisThoraxExtension
  };
  DriverVel={0};
  Reaction.Type={Off};
  CType = {Soft};
  AnyFolder Weight = { AnyFunConst fun =  { Value ={0.05}; }; };
  WeightFun = {&Weight.fun};
}; 
AnyKinEqSimpleDriver ThoraxLateralBending ={
  AnyKinMeasureOrg &ref1 = ...BodyModel.Interface.Trunk.PelvisThoraxLateralBending ;
  DriverPos=pi/180*{
    .JntPos.PelvisThoraxLateralBending
  };
  DriverVel={0};
  Reaction.Type={Off};
  CType = {Soft};
  AnyFolder Weight = { AnyFunConst fun =  { Value ={1}; }; };
  WeightFun = {&Weight.fun};
}; 

AnyKinEqSimpleDriver ElbowFlexionRight ={
  AnyKinMeasureOrg &ref3 =...BodyModel.Interface.Right.ElbowFlexion;
  DriverPos = pi/180*{
    .JntPos.Right.ElbowFlexion
  };
  DriverVel = {
    .JntVel.Right.ElbowFlexion
  };
  Reaction.Type={Off};
  CType = {Soft};
  AnyFolder Weight = { AnyFunConst fun =  { Value ={0.005}; }; };
  WeightFun = {&Weight.fun};
};

AnyKinEqSimpleDriver ElbowFlexionLeft ={
  AnyKinMeasureOrg &ref3 =...BodyModel.Interface.Left.ElbowFlexion;
  DriverPos = pi/180*{
    .JntPos.Left.ElbowFlexion
  };
  DriverVel = {
    .JntVel.Left.ElbowFlexion
  };
  Reaction.Type={Off};
  CType = {Soft};
  AnyFolder Weight = { AnyFunConst fun =  { Value ={0.01}; }; };
  WeightFun = {&Weight.fun};
};



AnyKinEqSimpleDriver Right_KneeFlexion={
  AnyKinMeasureOrg &ref1= ...BodyModel.Interface.Right.KneeFlexion; 
  DriverPos={0};
  DriverVel={0};
  Reaction.Type={Off};
  CType = {Soft};
  AnyFolder Weight = { AnyFunConst fun =  { Value ={1}; }; };
  WeightFun = {&Weight.fun};
};
AnyKinEqSimpleDriver Left_KneeFlexion={
  AnyKinMeasureOrg &ref1= ...BodyModel.Interface.Left.KneeFlexion; 
  DriverPos={0};
  DriverVel={0};
  Reaction.Type={Off};
  CType = {Soft};
  AnyFolder Weight = { AnyFunConst fun =  { Value ={1}; }; };
  WeightFun = {&Weight.fun};
};
//AnyKinEqSimpleDriver Right_AnklePlantarFlexion={
//  AnyKinMeasureOrg &ref1= ...BodyModel.Interface.Right.AnklePlantarFlexion; 
//  DriverPos={0};
//  DriverVel={0};
//  Reaction.Type={Off};
//  CType = {Soft};
//  AnyFolder Weight = { AnyFunConst fun =  { Value ={1}; }; };
//  WeightFun = {&Weight.fun};
//};
//AnyKinEqSimpleDriver Left_AnklePlantarFlexion={
//  AnyKinMeasureOrg &ref1= ...BodyModel.Interface.Left.AnklePlantarFlexion; 
//  DriverPos={0};
//  DriverVel={0};
//  Reaction.Type={Off};
//  CType = {Soft};
//  AnyFolder Weight = { AnyFunConst fun =  { Value ={1}; }; };
//  WeightFun = {&Weight.fun};
//};

#endif



//// LEG
//AnyKinEqSimpleDriver RightEversionBrace={
//  AnyKinMeasureOrg &ref1= ...BodyModel.Interface.Right.SubTalarEversion; 
//  DriverPos={0};
//  DriverVel={0};
//  Reaction.Type={On};
//};
//AnyKinEqSimpleDriver LefEversionBrace={
//  AnyKinMeasureOrg &ref1= ...BodyModel.Interface.Left.SubTalarEversion; 
//  DriverPos={0};
//  DriverVel={0};
//  Reaction.Type={On};
//};


//AnyKinEqSimpleDriver Right_HipFlexion={
//  AnyKinMeasureOrg &ref1= ...BodyModel.Interface.Right.HipFlexion; 
//  DriverPos={0};
//  DriverVel={0};
//  Reaction.Type={On};
//};
//AnyKinEqSimpleDriver Left_HipFlexion={
//  AnyKinMeasureOrg &ref1= ...BodyModel.Interface.Left.HipFlexion; 
//  DriverPos={0};
//  DriverVel={0};
//  Reaction.Type={On};
//};
//AnyKinEqSimpleDriver Right_HipAbduction={
//  AnyKinMeasureOrg &ref1= ...BodyModel.Interface.Right.HipAbduction; 
//  DriverPos={0};
//  DriverVel={0};
//  Reaction.Type={On};
//};
//AnyKinEqSimpleDriver Left_HipAbduction={
//  AnyKinMeasureOrg &ref1= ...BodyModel.Interface.Left.HipAbduction; 
//  DriverPos={0};
//  DriverVel={0};
//  Reaction.Type={On};
//};
//AnyKinEqSimpleDriver Right_HipExternalRotation={
//  AnyKinMeasureOrg &ref1= ...BodyModel.Interface.Right.HipExternalRotation; 
//  DriverPos={0};
//  DriverVel={0};
//  Reaction.Type={On};
//};
//AnyKinEqSimpleDriver Left_HipExternalRotation={
//  AnyKinMeasureOrg &ref1= ...BodyModel.Interface.Left.HipExternalRotation; 
//  DriverPos={0};
//  DriverVel={0};
//  Reaction.Type={On};
//};
//AnyKinEqSimpleDriver Right_KneeFlexion={
//  AnyKinMeasureOrg &ref1= ...BodyModel.Interface.Right.KneeFlexion; 
//  DriverPos={0};
//  DriverVel={0};
//  Reaction.Type={On};
//};
//AnyKinEqSimpleDriver Left_KneeFlexion={
//  AnyKinMeasureOrg &ref1= ...BodyModel.Interface.Left.KneeFlexion; 
//  DriverPos={0};
//  DriverVel={0};
//  Reaction.Type={On};
//};
//AnyKinEqSimpleDriver Right_AnklePlantarFlexion={
//  AnyKinMeasureOrg &ref1= ...BodyModel.Interface.Right.AnklePlantarFlexion; 
//  DriverPos={0};
//  DriverVel={0};
//  Reaction.Type={On};
//};
//AnyKinEqSimpleDriver Left_AnklePlantarFlexion={
//  AnyKinMeasureOrg &ref1= ...BodyModel.Interface.Left.AnklePlantarFlexion; 
//  DriverPos={0};
//  DriverVel={0};
//  Reaction.Type={On};
//};



//AnyKinEqSimpleDriver GlenohumeralExternalRotationRight ={
//  AnyKinMeasureOrg &ref3 =...BodyModel.Interface.Right.GlenohumeralExternalRotation;
//  DriverPos = pi/180*{
//    .JntPos.Right.GlenohumeralExternalRotation
//  };
//  DriverVel = {
//    .JntVel.Right.GlenohumeralExternalRotation
//  };
//  Reaction.Type={Off};
//};
//
//AnyKinEqSimpleDriver GlenohumeralExternalRotationLeft={
//  AnyKinMeasureOrg &ref3 =...BodyModel.Interface.Left.GlenohumeralExternalRotation;
//  DriverPos = pi/180*{
//    .JntPos.Left.GlenohumeralExternalRotation
//  };
//  DriverVel = {
//    .JntVel.Left.GlenohumeralExternalRotation
//  };
//  Reaction.Type={Off};
//};
//
//AnyKinEqSimpleDriver GlenohumeralAbductionRight ={
//  AnyKinMeasureOrg &ref3 =...BodyModel.Interface.Right.GlenohumeralAbduction;
//  DriverPos = pi/180*{
//    .JntPos.Right.GlenohumeralAbduction
//  };
//  DriverVel = {
//    .JntVel.Right.GlenohumeralAbduction
//  };
//  Reaction.Type={Off};
//};
//
//AnyKinEqSimpleDriver GlenohumeralAbductionLeft={
//  AnyKinMeasureOrg &ref3 =...BodyModel.Interface.Left.GlenohumeralAbduction;
//  DriverPos = pi/180*{
//    .JntPos.Left.GlenohumeralAbduction
//  };
//  DriverVel = {
//    .JntVel.Left.GlenohumeralAbduction
//  };
//  Reaction.Type={Off};
//};
//
//AnyKinEqSimpleDriver GlenohumeralFlexionRight ={
//  AnyKinMeasureOrg &ref3 =...BodyModel.Interface.Right.GlenohumeralFlexion;
//  DriverPos = pi/180*{
//    .JntPos.Right.GlenohumeralFlexion
//  };
//  DriverVel = {
//    .JntVel.Right.GlenohumeralFlexion
//  };
//  Reaction.Type={Off};
//};
//
//AnyKinEqSimpleDriver GlenohumeralFlexionLeft={
//  AnyKinMeasureOrg &ref3 =...BodyModel.Interface.Left.GlenohumeralFlexion;
//  DriverPos = pi/180*{
//    .JntPos.Left.GlenohumeralFlexion
//  };
//  DriverVel = {
//    .JntVel.Left.GlenohumeralFlexion
//  };
//  Reaction.Type={Off};
//};
//
//AnyKinEqSimpleDriver ElbowFlexionRight ={
//  AnyKinMeasureOrg &ref3 =...BodyModel.Interface.Right.ElbowFlexion;
//  DriverPos = pi/180*{
//    .JntPos.Right.ElbowFlexion
//  };
//  DriverVel = {
//    .JntVel.Right.ElbowFlexion
//  };
//  Reaction.Type={Off};
//};
//
//AnyKinEqSimpleDriver ElbowFlexionLeft ={
//  AnyKinMeasureOrg &ref3 =...BodyModel.Interface.Left.ElbowFlexion;
//  DriverPos = pi/180*{
//    .JntPos.Left.ElbowFlexion
//  };
//  DriverVel = {
//    .JntVel.Left.ElbowFlexion
//  };
//  Reaction.Type={Off};
//};

//AnyKinEqSimpleDriver WristFlexionRight ={
//  AnyKinMeasureOrg &ref3 =...BodyModel.Interface.Right.WristFlexion;
//  DriverPos = pi/180*{
//    .JntPos.Right.WristFlexion
//  };
//  DriverVel = {
//    .JntVel.Right.WristFlexion
//  };
//  Reaction.Type={Off};
//};
//
//AnyKinEqSimpleDriver WristFlexionLeft ={
//  AnyKinMeasureOrg &ref3 =...BodyModel.Interface.Left.WristFlexion;
//  DriverPos = pi/180*{
//    .JntPos.Left.WristFlexion
//  };
//  DriverVel = {
//    .JntVel.Left.WristFlexion
//  };
//  Reaction.Type={Off};
//};
//
//

//AnyKinEqSimpleDriver ElbowPronationRight ={
//  AnyKinMeasureOrg &ref3 =...BodyModel.Interface.Right.ElbowPronation;
//  DriverPos = pi/180*{
//    .JntPos.Right.ElbowPronation
//  };
//  DriverVel = {
//    .JntVel.Right.ElbowPronation
//  };
//  Reaction.Type={Off};
//};
//
//AnyKinEqSimpleDriver ElbowPronationLeft ={
//  AnyKinMeasureOrg &ref3 =...BodyModel.Interface.Left.ElbowPronation;
//  DriverPos = pi/180*{
//    .JntPos.Left.ElbowPronation
//  };
//  DriverVel = {
//    .JntVel.Left.ElbowPronation
//  };
//  Reaction.Type={Off};
//};

};