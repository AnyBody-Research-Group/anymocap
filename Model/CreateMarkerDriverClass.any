
// Class template arguments:

// MarkerName: 
// MarkerPlacement,
// Weight<X|Y|Z>: 
// Opt<X|Y|Z>: 
// ScaleMarkerPosOnOff: = "On",
// FilterCutOffFrequency: = 0,
// FilterOrder: = 2,
// UseC3DWeightResiduals = "Off",
// PARAMETER_OPT_STUDY = Main.Studies.ParameterIdentification,
// C3D_OBJECT = Main.ModelSetup.C3DFileData,
// BODY_MODEL_FOLDER = Main.HumanModel.BodyModel,
// PlaceMarkerAt = AnatomicalFrame



#class_template CreateMarkerDriver (MarkerName,
                                    MarkerPlacement,
                                    WeightX=1, WeightY=1, WeightZ=1,
                                    OptX="Off", OptY = "Off",OptZ="Off",
                                    ScaleMarkerPosOnOff = "On",
                                    FilterCutOffFrequency = 0,
                                    FilterOrder = 2,
                                    UseC3DWeightResiduals = "Off",
                                    PARAMETER_OPT_STUDY = Main.Studies.ParameterIdentification,
                                    C3D_OBJECT = Main.ModelSetup.C3DFileData,
                                    BODY_MODEL_FOLDER = Main.HumanModel.BodyModel,
                                    PlaceMarkerAt = AnatomicalFrame
                                    ){
                                      
  #var AnyVar ConstMarkerWeightX = WeightX;  
  #var AnyVar ConstMarkerWeightY = WeightY;
  #var AnyVar ConstMarkerWeightZ = WeightZ;
  
  #if UseC3DWeightResiduals == "On"
    AnyFunSquareWaveThreshold MarkerWeightsFun = 
    {
      #var dT = {C3D_OBJECT.WeightTransitionTime};
      T = C3D_OBJECT.Points.Markers.MarkerName.PosInterpol.T;
      Data = C3D_OBJECT.Points.Markers.MarkerName.Residual;
      OutputValues = 
            {{0, .ConstMarkerWeightX },
             {0, .ConstMarkerWeightY },
             {0, .ConstMarkerWeightZ}};
      #var Threshold = 0.0;
      #var TType = {TransitionStart, TransitionEnd};
    };
  #else
    AnyFunConst MarkerWeightsFun =
    { 
      Value = {.ConstMarkerWeightX , .ConstMarkerWeightY , .ConstMarkerWeightZ };
    };
  #endif
  
  #var AnyObjectPtrVar MarkerWeightsPtr = &MarkerWeightsFun;
    
  #var AnyVec3 sRelOpt; 
  #var AnyVec3 sRelOptDelta = {0, 0, 0};
  
  #if OptX =="Off" & OptY == "Off" & OptZ == "Off"
        AnyVec3 sRelOptEdit = DesignVar(sRelOptDelta); //make it a design var ! because it will not be otherwise
  #else
        AnyVec3 sRelOptEdit = sRelOptDelta; 
  #endif
  
  
  AnyFolder &Macro=  Main.ModelSetup.Macros ;
  Macro={
    AnyStringVar Set##MarkerName = ("classoperation "+  CompleteNameOf(.sRelOptEdit) + " " + strquote("Set Value") +  strformat ("\n")+ "classoperation Main " + strquote("Update Values") + strformat ("\n"));
  };

  
  Main.ModelSetup.ParameterIdentification = {
      AnyDesVar MarkerName##_X = {
        Val = ....sRelOptEdit[0];    
        #var Min=-100;
        #var Max=100;      
      };
      
      AnyDesVar MarkerName##_Y = {
        Val = ....sRelOptEdit[1];   
        #var Min=-100;
        #var Max=100;      
      };
      
      AnyDesVar MarkerName##_Z = {
        Val = ....sRelOptEdit[2];   
        #var Min=-100;
        #var Max=100;      
      };
  };
  
 

  AnyFolder &MarkerPlacementSegment = BODY_MODEL_FOLDER.MarkerPlacement;
  MarkerPlacementSegment = {
    
    AnyRefNode MarkerName={
            
      #if ScaleMarkerPosOnOff == "On"
        AnyVec3 MarkerOffset = (.GeomScale(..sRelOpt) + ..sRelOptEdit )*.AnatomicalFrame.ARel' ;
        sRel = .PlaceMarkerAt.sRel + MarkerOffset;
        ARel= .AnatomicalFrame.ARel;
      #else
        sRel = .PlaceMarkerAt.sRel + (..sRelOpt + ..sRelOptEdit )*.PlaceMarkerAt.ARel';
        ARel= .PlaceMarkerAt.ARel;
        
      #endif
      
//      This was an attempt to allow PlaceMarkerAt to be anywhere and not only
//      a RefNode on the segments.
//      AnyFunTransform3DLinRef Transform2SegmentFrame = {
//            AnyVec3 test1 = ..PlaceMarkerAt.sRel;
//            AnyMat33 test2 = ..PlaceMarkerAt.ARel;
//            Ref = &..PlaceMarkerAt;
//      };
//      sRel = Transform2SegmentFrame({0.0,0,0}) + MarkerOffset;
      
      
      AnyRefNode Arrows = {  
          AnyDrawVector X =   {
            AnyInt is_optimized = eqfun(OptX,"On");
            Vec = {size,0, 0};            
            #include "DrawVector.any"
            #var Text="X";
          };
          AnyDrawVector Y =  {
            AnyInt is_optimized = eqfun(OptY,"On");
            Vec = {0,size, 0};
            #include "DrawVector.any"
            #var Text="Y";
          };
          AnyDrawVector Z =  {
            AnyInt is_optimized = eqfun(OptZ,"On");
            Vec = {0,0,size};
            #include "DrawVector.any"
            #var Text="Z";
          };
      };//Arrows    
    }; //MarkerName 
  };// InsertionNode
  
      
      AnyKinDriverMarker Driver = {
        AnyDrawKinMeasure Draw = {
          #var Visible = On;
          #var Opacity = 1;
          #var Label = Off;
          #var Size = 0.01;
          #var Line = On;
        };
        Linear.Ref=0;
        AnyRefFrame &MarkerRef = BODY_MODEL_FOLDER.MarkerPlacement.MarkerName;
        AnyFolder &MarkerName = C3D_OBJECT.Points.Markers.MarkerName;
        
        #if FilterCutOffFrequency > 0
   	  /// A lowpass butterworth filter
   	    AnyFunButterworthFilter LowPassFilter = 
   	    {
   	     	#var FilterForwardBackwardOnOff = On;
   	     	#var AutomaticInitialConditionOnOff = On;
   	     	N = FilterOrder;
              W = {1/(C3D_OBJECT.Header.VideoFrameRate*0.5)*FilterCutOffFrequency };
   	      Type = LowPass;
   	    };
  	  
          // Filter the data

          AnyMatrix FilteredPos = LowPassFilter(MarkerName.Pos');
          
          /// Interpolation function of the lowpass filtered data
          AnyFunInterpol FilteredPosInterpol = 
          {
            #var Type = PiecewiseLinear;
            T = .MarkerName.PosInterpol.T;
            Data = .FilteredPos;
          };
          
        #else
        AnyParamFun &InterpolRef = MarkerName.PosInterpol;
        #endif
        
        WeightFun={.MarkerWeightsPtr};
      };


  PARAMETER_OPT_STUDY ={

    #if OptX =="On" 
    AnyDesVar &MarkerName##_X =  Main.ModelSetup.ParameterIdentification.MarkerName##_X;
    #endif
    
    #if OptY =="On"
    AnyDesVar &MarkerName##_Y =  Main.ModelSetup.ParameterIdentification.MarkerName##_Y;
    #endif
    
    #if OptZ =="On"
    AnyDesVar &MarkerName##_Z =  Main.ModelSetup.ParameterIdentification.MarkerName##_Z;
    #endif        
    
    
    
  };
  
  
  
  
  
  
}; // End of InsertSegmentClass






