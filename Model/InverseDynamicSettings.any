Kinematics.ApproxVelAccPerturb = 1.0/C3DData.Header.VideoFrameRate;
InitialConditions.ApproxVelAccPerturb = 1.0/C3DData.Header.VideoFrameRate;

 InitialConditions.KinematicTol=1e-5; 
 Kinematics.KinematicTol=1e-5; 

 #if ANYBODY_V1 >= 6 & ANYBODY_V2 >= 1
 Kinematics.Solver = &Kinematics.SolverOptions.KinSolDet1;
 InitialConditions.Solver = Kinematics.Solver;
 #else
 Kinematics.SolverType = KinSolDeterminate;
 InitialConditions.SolverType = Kinematics.SolverType;
 #endif
 
 #ifdef INCLUDE_MUSCLE_WEIGHT_FACTOR 
 Main = {AnyVar Power = .InverseDynamics.Criterion.Power;};
 #if INCLUDE_MUSCLE_WEIGHT_FACTOR > 0
 InverseDynamics.Criterion.PrimaryTerm.Weight_SearchName = "WeightFactor";
 #endif
 #endif  
 


//InverseDynamics.PreOperation = {
//  AnyOperation &SetView = Main.ModelSetup.ModelViews.SetViewMacros.InverseDynamicView ; 
//  AnyOperationMacro UpdateValues_HACK_WORKAROUND = { MacroStr = {"classoperation Main"+ strquote("Update Values") };  };
//  AnyOperation &Init = Main.Studies.InverseDynamicStudy.InitialConditions;
// };



 #ifndef N_STEP
 #define N_STEP Main.ModelSetup.TrialSpecificData.nStep
 #endif
 
 #ifndef T_END
 #define T_END Main.ModelSetup.TrialSpecificData.tEnd
 #endif
 
 #ifndef T_START
 #define T_START Main.ModelSetup.TrialSpecificData.tStart
 #endif
 
 tStart = T_START+2*Kinematics.ApproxVelAccPerturb ; 
 tEnd = max({T_END-2*Kinematics.ApproxVelAccPerturb,tStart});
 nStep= max({N_STEP-4, 1});
 
 
 