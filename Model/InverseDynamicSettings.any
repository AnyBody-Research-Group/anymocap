 
 
 Kinematics.ApproxVelAccPerturb = max({1.0/C3DData.Header.VideoFrameRate, (T_END-T_START)/(max({nStep-1,1}))});
 InitialConditions.ApproxVelAccPerturb = Kinematics.ApproxVelAccPerturb ;

 InitialConditions.KinematicTol=1e-5; 
 Kinematics.KinematicTol=1e-5; 

 Kinematics.SolverType = KinSolDeterminate;
 InitialConditions.SolverType = Kinematics.SolverType;
 
 #ifdef INCLUDE_MUSCLE_WEIGHT_FACTOR 
 Main = {AnyVar Power = .InverseDynamics.Criterion.Power;};
 #if INCLUDE_MUSCLE_WEIGHT_FACTOR > 0
 InverseDynamics.Criterion.PrimaryTerm.Weight_SearchName = "WeightFactor";
 #endif
 #endif  
 


InitialConditions.PreOperation = 
{
//  AnyOperationMacro UpdateValues = 
//  {
//    MacroStr  = {"classoperation Main " + strquote("Update Values")};   
//  };
//  AnyOperation &SetView = Main.ModelSetup.Views.SetViewMacros.InverseDynamicView; 
};
 

// Add the Analysis to the Main.RunAnalysis sequence
Main.RunAnalysis.InverseDynamics = 
{
  #if BM_LEG_MUSCLES_BOTH == CONST_MUSCLES_3E_HILL
    AnyOperationSequence &MuscleCalibration = Main.HumanModel.Calibration.CalibrationSequence;
  #endif      
  
  AnyOperation &RunInverseDynamics = ...InverseDynamics;
};

 
 
 

 #ifndef N_STEP
 #define N_STEP Main.ModelSetup.TrialSpecificData.nStep
 #endif
 
 #ifndef T_END
 #define T_END Main.ModelSetup.TrialSpecificData.tEnd
 #endif
 
 #ifndef T_START
 #define T_START Main.ModelSetup.TrialSpecificData.tStart
 #endif
 
 
 
 tStart = T_START+2*Kinematics.ApproxVelAccPerturb; 
 tEnd = max({T_END-2*Kinematics.ApproxVelAccPerturb , tStart});
 nStep= max({N_STEP-4, 1});
 
 
 