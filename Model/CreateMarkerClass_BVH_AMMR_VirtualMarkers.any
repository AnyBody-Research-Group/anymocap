

// Class template arguments:

// MarkerName: 
// MarkerPlacement,
// Weight<X|Y|Z>: 
// Opt<X|Y|Z>: 
// ScaleMarkerPosOnOff: = "On",
// UseAnatomicalFrame = "On", 
// FilterCutOffFrequency: = 0,
// FilterOrder: = 2,
// UseC3DWeightResiduals = "Off",
// PARAMETER_OPT_STUDY = ParameterIdentification,
// C3D_OBJECT = C3DFileData,
// BODY_MODEL_FOLDER = BodyModel,
// PlaceMarkerAt = AnatomicalFrame,
// Model = CreateVirtualTrajectories


#class_template CreateMarkerDriverBVH (MarkerName,
MarkerPlacement,
MarkerPlacementBVH,
WeightX=1, WeightY=1, WeightZ=1,
OptX="Off", OptY = "Off",OptZ="Off",
ScaleMarkerPosOnOff = "On",
FilterCutOffFrequency = 0,
FilterOrder = 2,
PARAMETER_OPT_STUDY = Main.Studies.ParameterIdentification,
C3D_OBJECT = Main.ModelSetup.C3DFileData,
BVH_OBJECT = Main.ModelSetup.BVHFileData,
BODY_MODEL_FOLDER = Main.HumanModel.BodyModel,
PlaceMarkerAt = AnatomicalFrame,
FrameTime = Main.ModelSetup.BVHFileData.Header.FrameTime)
{
  
  #var AnyVar ConstMarkerWeightX = WeightX;
  #var AnyVar ConstMarkerWeightY = WeightY;
  #var AnyVar ConstMarkerWeightZ = WeightZ;
  AnyFunConst FunConstMarkerWeights ={ Value = {.ConstMarkerWeightX , .ConstMarkerWeightY , .ConstMarkerWeightZ };};
  
  
  #var AnyObjectPtrVar MarkerWeightsPtr = &FunConstMarkerWeights;
  
  
  #var AnyVec3 sRelOpt ;  // Variable with obligatory initialization
  #var AnyVec3 sRelOnBVH ;  // Variable with obligatory initialization
  #var AnyVec3 sRelOptDelta = {0, 0, 0};
  
  #if OptX =="Off" & OptY == "Off" & OptZ == "Off"
  AnyVec3 sRelOptEdit = DesignVar(sRelOptDelta); //make it a design var ! because it will not be otherwise
  #else
  AnyVec3 sRelOptEdit = sRelOptDelta; 
  #endif
  
  
  AnyFolder &Macro=  Main.ModelSetup.Macros ;
  Macro={
    AnyStringVar Set##MarkerName = ("classoperation "+  CompleteNameOf(.sRelOptEdit) + " " + strquote("Set Value") +  strformat ("\n")+ "classoperation Main " + strquote("Update Values") + strformat ("\n"));
  };
  
  Main.ModelSetup.ParameterIdentification = {
    AnyDesVar MarkerName##_X = {
      Val = ....sRelOptEdit[0];    
      #var Min=-100;
      #var Max=100;      
    };
    
    AnyDesVar MarkerName##_Y = {
      Val = ....sRelOptEdit[1];   
      #var Min=-100;
      #var Max=100;      
    };
    
    AnyDesVar MarkerName##_Z = {
      Val = ....sRelOptEdit[2];   
      #var Min=-100;
      #var Max=100;      
    };
  };  
  
  AnyFolder &MarkerPlacementSegment = BODY_MODEL_FOLDER.MarkerPlacement;
  MarkerPlacementSegment = 
  {
    AnyRefNode MarkerName = 
    {
      //      #if UseAnatomicalFrameOnOff == "On"
      //        #if ScaleMarkerPosOnOff == "On"
      //          AnyVec3 MarkerOffset = (.GeomScale(..sRelOpt) + ..sRelOptEdit )*.AnatomicalFrame.ARel' ;
      //        #else
      //          AnyVec3 MarkerOffset = (..sRelOpt + ..sRelOptEdit )*.AnatomicalFrame.ARel' ;
      //        #endif
      //        sRel = .PlaceMarkerAt.sRel + MarkerOffset;
      //        ARel= .AnatomicalFrame.ARel;
      //
      //      #else
      //
      //       //bvh markers are not suppose to scale...always needs to be relative to joint or similar point and the dimension needs to match stickfigure dim
      //       sRel = .PlaceMarkerAt.sRel + ..sRelOpt;
      //    #endif
      
      #if ScaleMarkerPosOnOff == "On"
      AnyVec3 MarkerOffset = (.GeomScale(..sRelOpt) + ..sRelOptEdit )*.AnatomicalFrame.ARel' ;
      sRel = .PlaceMarkerAt.sRel + MarkerOffset;
      ARel= .AnatomicalFrame.ARel;
      #else
//      sRel = .PlaceMarkerAt.sRel + (..sRelOpt + ..sRelOptEdit )*.PlaceMarkerAt.ARel';
//      ARel= .PlaceMarkerAt.ARel;
        sRel = .PlaceMarkerAt.sRel + ..sRelOpt;
      #endif
      
      
      AnyRefNode Arrows = 
      {  
        AnyDrawVector X =   {
          AnyInt is_optimized = eqfun(OptX,"On");
          Vec = {size,0, 0};            
          #include "DrawVector.any"
          #var Text="X";
        };
        AnyDrawVector Y =  {
          AnyInt is_optimized = eqfun(OptY,"On");
          Vec = {0,size, 0};
          #include "DrawVector.any"
          #var Text="Y";
        };
        AnyDrawVector Z =  {
          AnyInt is_optimized = eqfun(OptZ,"On");
          Vec = {0,0,size};
          #include "DrawVector.any"
          #var Text="Z";
        };
      };//Arrows    
    }; //MarkerName 
  };// MarkerPlacementSegment
  

  
  //create a drivers using the data from the virtual maker position
  //this requires that the stickfigure has been kin analysis first
  AnyKinDriverMarker Driver = 
  {
    AnyDrawKinMeasure Draw = {
      #var Visible = On;
      #var Opacity = 1;
      #var Label = Off;
      #var Size = 0.01;
      #var Line = On;
    };
    Linear.Ref=0;
    AnyRefFrame &MarkerRef = BODY_MODEL_FOLDER.MarkerPlacement.MarkerName;
    //AnyFolder &MarkerName = C3D_OBJECT.Points.Markers.MarkerName;
    
    #if FilterCutOffFrequency > 0
    /// A lowpass butterworth filter
    AnyFunButterworthFilter LowPassFilter = {
      #var FilterForwardBackwardOnOff = On;
      #var AutomaticInitialConditionOnOff = On;
      N = FilterOrder;
      AnyVar SampleFreq=1/FrameTime;
      W = {1/(SampleFreq*0.5)*(FilterCutOffFrequency) };
      Type = LowPass;
    };
    
    // Filter the data
    //AnyMatrix FilteredPos = LowPassFilter(.InterpolFun.Data);
    AnyMatrix FilteredPos = LowPassFilter(C3D_OBJECT.Points.Markers.MarkerName.FromBVH.Data);
    
    /// Interpolation function of the lowpass filtered data
    AnyFunInterpol FilteredPosInterpol = {
      #var Type = Bspline;
      BsplineOrder =4;
      
      //T = ..InterpolFun.T;
      //Data = .FilteredPos;
      T = C3D_OBJECT.Points.Markers.MarkerName.FromBVH.val_T ;
      Data = .FilteredPos;
    };
    
//    AnyDrawSphere unfilteredTest ={
//      RGB={1,0,1};
//      ScaleXYZ={1,1,1}*0.01;
//      Position = ..InterpolFun(.t);
//    };
    
    #else
      AnyParamFun &InterpolRef = C3D_OBJECT.Points.Markers.MarkerName.InterpolFun;
    #endif
    
    WeightFun={.MarkerWeightsPtr};
  }; 
  
  //-->Test
  AnyFolder Test_Visual = 
  {
    AnyFunInterpol UnfilteredPosInterpol = 
    {
      Type = PiecewiseLinear ;
      T = C3D_OBJECT.Points.Markers.MarkerName.FromBVH.val_T ;
      Data = C3D_OBJECT.Points.Markers.MarkerName.FromBVH.Data ;
    };
    AnyDrawSphere UnfilteredTest ={
      RGB={1,0,1};
      ScaleXYZ={1,1,1}*0.01;
      Position = .UnfilteredPosInterpol(..Driver.t);
    };        
  };
  //<--Test
    
  C3D_OBJECT.Points.Markers = 
  {
    AnyFolder MarkerName = 
    {
      AnyFunction& FilterRef = C3D_OBJECT.Filter;
      AnyFloat Pos = FromBVH.Data';
      AnyFloat PosFiltered = FilterRef(FromBVH.Data)';
      AnyFunInterpol PosInterpol = 
      {
        #var Type = Bspline;
        BsplineOrder =4;
        
        T = .FromBVH.val_T;
        Data = (.PosFiltered)';
      };         
      AnyFolder FromBVH = 
      {
        AnyVector val_X =DesignVar(iarr(0,Main.Studies.BVH_CreateMarkerTrajectoriesStudy.nStep-1)*0);
        AnyVector val_Y =DesignVar(iarr(0,Main.Studies.BVH_CreateMarkerTrajectoriesStudy.nStep-1)*0);
        AnyVector val_Z =DesignVar(iarr(0,Main.Studies.BVH_CreateMarkerTrajectoriesStudy.nStep-1)*0);
        AnyVector val_T=DesignVar(iarr(0,Main.Studies.BVH_CreateMarkerTrajectoriesStudy.nStep-1));
        AnyFloat  Data= DesignVar({val_X,val_Y,val_Z});        
      };
    };
  };  
  
  PARAMETER_OPT_STUDY ={
    
    #if OptX =="On" 
    AnyDesVar &MarkerName##_X =  Main.ModelSetup.ParameterIdentification.MarkerName##_X;
    #endif
    
    #if OptY =="On"
    AnyDesVar &MarkerName##_Y =  Main.ModelSetup.ParameterIdentification.MarkerName##_Y;
    #endif
    
    #if OptZ =="On"
    AnyDesVar &MarkerName##_Z =  Main.ModelSetup.ParameterIdentification.MarkerName##_Z;
    #endif        
    
  };  
  
  //Create the marker on the BVH stick figure
  
  AnyFolder &MarkerInsertionNodeBVH = MarkerPlacementBVH;
  MarkerInsertionNodeBVH = 
  {
    AnyRefNode MarkerName = 
    {
      sRel = ..sRelOnBVH;
      //sRel = Main.ModelSetup.MocapDrivers.MarkerName.sRelOnBVH ;
      AnyDrawNode drw_node = 
      {
        RGB = {0, 1, 0};
        ScaleXYZ = 0.01*{1, 1, 1};        
      };
    };
  };//
  
//  AnyObjectPtrVar pObjBVHSeg = &MarkerInsertionNodeBVH ;
//  AnyString strBVHSeg = CompleteNameOf(pObjBVHSeg); 
//  AnyMechObjectExcluder ExtraExcluder = 
//  {
//    Objects = ObjSearchRecursive(.strBVHSeg, "*","AnyMechObject");
//  };
  
  //Create a measure to from global to the marker on stick figure 
  Main.Studies.BVH_CreateMarkerTrajectoriesStudy.MarkerOutput =
  {  
    AnyFolder MarkerName ={
      AnyOutputFun Output_X ={          Val =.lin.Pos[0];        };
      AnyOutputFun Output_Y ={          Val =.lin.Pos[1];        };
      AnyOutputFun Output_Z ={          Val =.lin.Pos[2];        };
      AnyOutputFun Output_T ={          Val =.lin.t;        };
      
      AnyKinLinear  lin  ={
        AnyRefNode &ref=Main.ModelSetup.MocapDrivers.MarkerName.MarkerInsertionNodeBVH.MarkerName ;
        Ref=-1;
      };
      
    };   
  };
  
  Main.Studies.BVH_CallOutputFunStudy = 
  {  
    AnyVector MarkerName##_Val_X = iffun(eqfun(SizesOf(Main.Studies.BVH_CreateMarkerTrajectoriesStudy.MarkerOutput.MarkerName.Output_X())[0],1),0*farr(0.0,1.0,Main.Studies.BVH_CreateMarkerTrajectoriesStudy.nStep),Main.Studies.BVH_CreateMarkerTrajectoriesStudy.MarkerOutput.MarkerName.Output_X());
    AnyVector MarkerName##_Val_Y = iffun(eqfun(SizesOf(Main.Studies.BVH_CreateMarkerTrajectoriesStudy.MarkerOutput.MarkerName.Output_Y())[0],1),0*farr(0.0,1.0,Main.Studies.BVH_CreateMarkerTrajectoriesStudy.nStep),Main.Studies.BVH_CreateMarkerTrajectoriesStudy.MarkerOutput.MarkerName.Output_Y());
    AnyVector MarkerName##_Val_Z = iffun(eqfun(SizesOf(Main.Studies.BVH_CreateMarkerTrajectoriesStudy.MarkerOutput.MarkerName.Output_Z())[0],1),0*farr(0.0,1.0,Main.Studies.BVH_CreateMarkerTrajectoriesStudy.nStep),Main.Studies.BVH_CreateMarkerTrajectoriesStudy.MarkerOutput.MarkerName.Output_Z());
    AnyVector MarkerName##_Val_T = iffun(eqfun(SizesOf(Main.Studies.BVH_CreateMarkerTrajectoriesStudy.MarkerOutput.MarkerName.Output_T())[0],1),0*farr(0.0,1.0,Main.Studies.BVH_CreateMarkerTrajectoriesStudy.nStep),Main.Studies.BVH_CreateMarkerTrajectoriesStudy.MarkerOutput.MarkerName.Output_T());
  };

}; 

