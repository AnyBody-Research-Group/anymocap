#class_template CreateMarkerDriver (MarkerName,
                                    MarkerPlacement,
                                    WeightX=1, WeightY=1, WeightZ=1,
                                    OptX="Off", OptY = "Off",OptZ="Off",
                                    sRelOptScalingOnOff = "On",
                                    FilterCutOffFrequency = 0,
                                    FilterOrder = 2,
                                    UseC3DWeightResiduals = "Off",
                                    PARAMETER_OPT_STUDY = ParameterIdentification,
                                    C3D_OBJECT = C3DFileData,
                                    BODY_MODEL_FOLDER = BodyModel
                                    ){
                                      
  #var AnyVar ConstMarkerWeightX = WeightX;
  #var AnyVar ConstMarkerWeightY = WeightY;
  #var AnyVar ConstMarkerWeightZ = WeightZ;
  AnyFunConst FunConstMarkerWeights ={ Value = {.ConstMarkerWeightX , .ConstMarkerWeightY , .ConstMarkerWeightZ };};


  #if UseC3DWeightResiduals == "On"
    #var AnyObjectPtrVar MarkerWeightsPtr = &Main.ModelSetup.C3D_OBJECT.Points.Markers.MarkerName.Weight;
  #else
    #var AnyObjectPtrVar MarkerWeightsPtr = &FunConstMarkerWeights;
  #endif
  
    
  #var AnyVec3 sRelOpt ;  // Variable with obligatory initialization
  #var AnyVec3 sRelOptDelta = {0, 0, 0};
  
  #if OptX =="Off" & OptY == "Off" & OptZ == "Off"
        AnyVec3 sRelOptEdit = DesignVar(sRelOptDelta); //make it a design var ! because it will not be otherwise
  #else
        AnyVec3 sRelOptEdit = sRelOptDelta; 
  #endif
  
  
  AnyFolder &Macro=  Main.ModelSetup.Macros ;
  Macro={
    AnyStringVar Set##MarkerName = ("classoperation "+  CompleteNameOf(.sRelOptEdit) + " " + strquote("Set Value") +  strformat ("\n")+ "classoperation Main " + strquote("Update Values") + strformat ("\n"));
  };

  AnyFolder &MarkerInsertionNode = Main.HumanModel.BODY_MODEL_FOLDER.MarkerPlacement;
  MarkerInsertionNode = {
    
    AnyRefNode MarkerName={
      #if sRelOptScalingOnOff == "On"
        sRel= .AnatomicalFrame.sRel+ (.GeomScale(..sRelOpt) + ..sRelOptEdit )*.AnatomicalFrame.ARel' ;
      #else
        sRel= .AnatomicalFrame.sRel+ (..sRelOpt + ..sRelOptEdit )*.AnatomicalFrame.ARel' ;
      #endif
      ARel= .AnatomicalFrame.ARel;
      
      AnyRefNode Arrows = {  
          AnyDrawVector X =   {
            AnyInt is_optimized = eqfun(OptX,"On");
            Vec = {size,0, 0};            
            #include "DrawVector.any"
            #var Text="X";
          };
          AnyDrawVector Y =  {
            AnyInt is_optimized = eqfun(OptY,"On");
            Vec = {0,size, 0};
            #include "DrawVector.any"
            #var Text="Y";
          };
          AnyDrawVector Z =  {
            AnyInt is_optimized = eqfun(OptZ,"On");
            Vec = {0,0,size};
            #include "DrawVector.any"
            #var Text="Z";
          };
      };
      AnyDesVar DesVarX = {
        Val = ...sRelOptEdit[0];    
        #var Min=-100;
        #var Max=100;      
      };
      
      AnyDesVar DesVarY = {
        Val = ...sRelOptEdit[1];   
        #var Min=-100;
        #var Max=100;      
      };
      
      AnyDesVar DesVarZ = {
        Val = ...sRelOptEdit[2];   
        #var Min=-100;
        #var Max=100;      
      };
      
      
    }; //create the marker 
  };
  
      
      AnyKinDriverMarker Driver = {
        AnyDrawKinMeasure Draw = {
          #var Visible = Off;
          #var Opacity = 1;
          #var Label = Off;
          #var Size = 0.01;
          #var Line = On;
        };
        Linear.Ref=0;
        AnyRefFrame &MarkerRef = Main.HumanModel.BODY_MODEL_FOLDER.MarkerPlacement.MarkerName;
        
        #if FilterCutOffFrequency > 0
   	  /// A lowpass butterworth filter
   	    AnyFunButterworthFilter LowPassFilter = 
   	    {
   	     	#var FilterForwardBackwardOnOff = On;
   	     	#var AutomaticInitialConditionOnOff = On;
   	     	N = FilterOrder;
            W = {1/(Main.ModelSetup.C3D_OBJECT.Filter.Fs[0]*0.5)*FilterCutOffFrequency };
   	      Type = LowPass;
   	    };
  	  
          // Filter the data
          AnyMatrix FilteredPos = LowPassFilter(Main.ModelSetup.C3D_OBJECT.Points.Markers.MarkerName.Pos');
          
          /// Interpolation function of the lowpass filtered data
          AnyFunInterpol FilteredPosInterpol = 
          {
            #var Type = PiecewiseLinear;
            T = Main.ModelSetup.C3D_OBJECT.Points.Markers.MarkerName.PosInterpol.T;
            Data = .FilteredPos;
          };
          
        #else
        
        AnyParamFun &InterpolRef = Main.ModelSetup.C3D_OBJECT.Points.Markers.MarkerName.PosInterpol;
        #endif
        
        WeightFun={.MarkerWeightsPtr};
      };


  Main.Studies.PARAMETER_OPT_STUDY ={

    #if OptX =="On" 
    AnyDesVar &MarkerName##X =  Main.HumanModel.BODY_MODEL_FOLDER.MarkerPlacement.MarkerName.DesVarX ;
    #endif
    
    #if OptY =="On"
    AnyDesVar &MarkerName##Y =  Main.HumanModel.BODY_MODEL_FOLDER.MarkerPlacement.MarkerName.DesVarY ;
    #endif
    
    #if OptZ =="On"
    AnyDesVar &MarkerName##Z =  Main.HumanModel.BODY_MODEL_FOLDER.MarkerPlacement.MarkerName.DesVarZ ;
    #endif        
    
    
    
  };
  
  
  
  
  
  
}; // End of InsertSegmentClass






