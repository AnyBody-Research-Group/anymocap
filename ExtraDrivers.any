AnyFolder ExtraDrivers = {
  

// This file contains a set of auxillary drivers. They are necessary in 
// some cases where the marker protocol doesn't provide enough information
// to specify all degrees of freedom. Hence, these drivers complement a
// specific driver protocol. 
    
AnyFolder &JntPos= Main.HumanModel.Mannequin.Posture;  
AnyFolder &JntVel= Main.HumanModel.Mannequin.PostureVel;
AnyFolder &InterfaceRef = Main.HumanModel.BodyModel.Interface;

//AnyKinEqSimpleDriver SCDriverLeft ={
//  AnyKinMeasureOrg &ref3 = Main.HumanModel.BodyModel.Interface.Left.SternoClavicularAxialRotation;
//  DriverPos = pi/180*{
//    .JntPos.Left.SternoClavicularAxialRotation
//  };
//  DriverVel = pi/180*{
//    .JntVel.Left.SternoClavicularAxialRotation
//  };
//  Reaction.Type={Off};
//};
AnyKinEqSimpleDriver SCDriverRight ={
  AnyKinMeasureOrg &ref3 = Main.HumanModel.BodyModel.Interface.Right.SternoClavicularAxialRotation;
  DriverPos = pi/180*{
    .JntPos.Right.SternoClavicularAxialRotation
  };
  DriverVel = {
    .JntVel.Right.SternoClavicularAxialRotation
  };
  Reaction.Type={Off};
};


AnyKinEqSimpleDriver GlenohumeralExternalRotationRight ={
  AnyKinMeasureOrg &ref3 = .InterfaceRef.Right.GlenohumeralExternalRotation;
  DriverPos = pi/180*{
    .JntPos.Right.GlenohumeralExternalRotation
  };
  DriverVel = {
    .JntVel.Right.GlenohumeralExternalRotation
  };
  Reaction.Type={Off};
  CType = {Soft};
  AnyFolder Weight = { AnyFunConst fun =  { Value ={0.005}; }; };
  WeightFun = {&Weight.fun};
};

//AnyKinEqSimpleDriver GlenohumeralExternalRotationLeft={
//  AnyKinMeasureOrg &ref3 = .InterfaceRef.Left.GlenohumeralExternalRotation;
//  DriverPos = pi/180*{
//    .JntPos.Left.GlenohumeralExternalRotation
//  };
//  DriverVel = {
//    .JntVel.Left.GlenohumeralExternalRotation
//  };
//  Reaction.Type={Off};
//  CType = {Soft};
//  AnyFolder Weight = { AnyFunConst fun =  { Value ={0.005}; }; };
//  WeightFun = {&Weight.fun};
//};


AnyKinEqSimpleDriver WristAbductionRight ={
  AnyKinMeasureOrg &ref3 = .InterfaceRef.Right.WristAbduction;
  DriverPos = pi/180*{
    .JntPos.Right.WristAbduction
  };
  DriverVel = {
    .JntVel.Right.WristAbduction
  };
  Reaction.Type={Off};
  CType = {Soft};
  AnyFolder Weight = { AnyFunConst fun =  { Value ={0.01}; }; };
  WeightFun = {&Weight.fun};
};

//AnyKinEqSimpleDriver WristAbductionLeft ={
//  AnyKinMeasureOrg &ref3 = .InterfaceRef.Left.WristAbduction;
//  DriverPos = pi/180*{
//    .JntPos.Left.WristAbduction
//  };
//  DriverVel = {
//    .JntVel.Left.WristAbduction
//  };
//  Reaction.Type={Off};
//  CType = {Soft};
//  AnyFolder Weight = { AnyFunConst fun =  { Value ={0.01}; }; };
//  WeightFun = {&Weight.fun};
//};  
  
  
AnyKinEqSimpleDriver RightEversionBrace={
  AnyKinMeasureOrg &ref1= .InterfaceRef.Right.SubTalarEversion; 
  DriverPos= pi/180*{
    .JntPos.Right.SubTalarEversion 
  };
  DriverVel={0};
  Reaction.Type={Off};
  CType = {Soft};
  AnyFolder Weight = { AnyFunConst fun =  { Value ={0.005}; }; };
  WeightFun = {&Weight.fun};
};

AnyKinEqSimpleDriver LefEversionBrace={
  AnyKinMeasureOrg &ref1= .InterfaceRef.Left.SubTalarEversion; 
  DriverPos=pi/180*{ 
    .JntPos.Left.SubTalarEversion 
  };
  DriverVel={0};
  Reaction.Type={Off};
  CType = {Soft};
  AnyFolder Weight = { AnyFunConst fun =  { Value ={0.005}; }; };
  WeightFun = {&Weight.fun};
};

  
  
  
};